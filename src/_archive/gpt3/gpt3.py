import os
import re
import pandas as pd
import openai

openapi.api_key = os.environ['OPENAPI_KEY']

class GPT3:
    """
    Class for interacting with GPT-3 to generate and extract question and answer pairs.
    """

    @staticmethod
    def extract_qna(response_text):
        """
        Extract question and answer pairs from the response text.

        Args:
            response_text (str): The text generated by GPT-3.

        Returns:
            list: A list of dictionaries containing question and answer pairs.
        """
        # Compile regex patterns to match questions and answers in the text
        question_pattern = re.compile(r"Q\d+:.*?(?=\nA\d+:|$)", re.DOTALL)
        answer_pattern = re.compile(r"A\d+:.*?(?=\nQ\d+:|$)", re.DOTALL)

        # Find all questions and answers using the regex patterns
        questions = question_pattern.findall(response_text)
        answers = answer_pattern.findall(response_text)

        # Create a list of dictionaries containing question and answer pairs
        qna_pairs = [
            {
                "question": question[4:].replace("\n", " ").strip(),
                "answer": answer[4:].replace("\n", " ").strip(),
            }
            for question, answer in zip(questions, answers)
        ]

        return qna_pairs

    @staticmethod
    def complete_prompt(prompt, output_csv="qna_pairs.csv"):
        """
        Generate a GPT-3 response based on the given prompt and extract question and answer pairs.

        Args:
            prompt (str): The input prompt for GPT-3.
            output_csv (str, optional): The filename to save the extracted question and answer pairs. Defaults to "qna_pairs.csv".

        Returns:
            pd.DataFrame: A DataFrame containing the extracted question and answer pairs.
        """
        try:
            # Create a GPT-3 completion request with the specified parameters
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=prompt,
                temperature=0.7,
                max_tokens=256,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0,
            )

            # Extract the generated text from the GPT-3 response
            generated_text = response["choices"][0]["text"]

            # Extract question and answer pairs from the generated text
            qna_pairs = GPT3.extract_qna(generated_text)

            # Convert the extracted question and answer pairs to a DataFrame
            df = pd.DataFrame(qna_pairs)

            # Save the question and answer pairs to the specified CSV file
            if not os.path.exists(output_csv):
                df.to_csv(output_csv, mode="w", index=False, header=True)
            else:
                df.to_csv(output_csv, mode="a", index=False, header=False)

        except Exception as e:
            print(f"Error generating response and extracting QnA pairs: {e}")
